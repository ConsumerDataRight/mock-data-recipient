@{
	ViewData["Title"] = "Data Holders";
	var allowDataHolderRefresh = await _featureManager.IsEnabledAsync(nameof(FeatureFlags.AllowDataHolderRefresh));
}
@using CDR.DataRecipient.SDK.Enumerations
@using CDR.DataRecipient.Web.Extensions
@using CDR.DataRecipient.Web.Features
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Configuration
@using Microsoft.FeatureManagement
@inject IConfiguration _config
@inject IFeatureManager _featureManager
@model DataHoldersModel

<h2>
	@(allowDataHolderRefresh ? "Discover Data Holders" : "Data Holders")
</h2>

@if (allowDataHolderRefresh)
{
	<p>This page provides a way to call the Mock Register to retrieve a list of data holders. </p>
	<p>To initiate the call, simply click <strong>Refresh</strong>. Any returned data holders will be added to the stored list, which is held (in memory) by the Mock Data Recipient.</p>
	<p>You can check for updated data holder metadata by clicking <strong>Refresh</strong> to again call the Register.</p>
	<p>To clear the current list of Data Holders from memory, click <strong>Reset</strong>.</p>
}
else
{
	<p>This page provides a way to view the data holders that are currently stored in the Mock Data Recipient's repository.</p>
	<p>This solution periodically refreshes the Data Holder Brand metadata via calls to the Hosted Sandbox Register.</p>
}

<br/>
<div class="row">
	@if (allowDataHolderRefresh)
	{
		<div class="col-sm-7">
			<div class="card h-100">
				<h5 class="card-header">Refresh Data Holders</h5>
				<div class="card-body">
					<h5 class="card-title">Call the Register to retrieve the Data Holder Brands</h5>
					<div class="card-text">
						<div class="code">
							<code>
								@Html.DisplayFor(x => x.RefreshRequest)
							</code>
						</div>
						@using (Html.BeginForm())
						{
							<input type="hidden" id="IndustryId" name="IndustryId" value="">
							<div class="form">
								<div class="row mb-3">
									@Html.LabelFor(m => m.Industry, new { @class = "col-sm-2 col-form-label" })
									<div class="col-sm-10">
										@Html.DropDownListFor(m => m.Industry, Html.GetEnumSelectList<Industry>(), new { @class = "form-control" })
									</div>
								</div>

								<div class="row mb-3">
									@Html.LabelFor(m => m.Version, new { @class = "col-sm-2 col-form-label" })
									<div class="col-sm-10">
										@Html.TextBoxFor(m => m.Version, new { @class = "form-control" })
									</div>
								</div>

								<div class="row mb-3 buttons">
									<div class="col-sm-10 offset-sm-2">
										<input name="refresh" type="submit" value="Refresh" class="btn btn-primary mr-3" />
										<input id="btnReset" type="button" value="Reset" class="btn btn-primary">
									</div>
								</div>
							</div>
						}
					</div>
				</div>
				<div class="card-footer">
					<small class="text-muted">@Model.Messages</small>
				</div>
			</div>
		</div>
	}

	<div class="@(allowDataHolderRefresh? "col-sm-5" : "col-sm-12")">
		<div class="card h-100">
			<h5 class="card-header">@(allowDataHolderRefresh ? "Current Data Holders" : "Data Holder Brands")</h5>
			<div class="card-body" style="max-height: 400px; overflow-y: scroll;">
				<p class="card-text">
					@if (@Model.DataHolders.Count() > 0)
					{
						<table class="table table-striped table-hover table-bordered">
							<caption>CDR Data Holders</caption>
							<thead>
								<tr>
									<th scope="col">Legal Entity</th>
									<th scope="col">Brand</th>
									<th scope="col">Active</th>
								</tr>
							</thead>
							@foreach (var dh in Model.DataHolders)
							{
								<tr>
									<td>@dh.LegalEntity.LegalEntityName (@dh.LegalEntity.LegalEntityId)</td>
									<td>@dh.BrandName (@dh.DataHolderBrandId)</td>
									<td>
										@if (allowDataHolderRefresh)
										{
											@(dh.Status == "ACTIVE" ? "Yes" : "No")

										}
										else
										{
											@dh.Status
										}
									</td>
								</tr>
							}
						</table>
					}
					else
					{
						<div>No data holders found.</div>
					}
				</p>
			</div>
			<div class="card-footer">
				<small class="text-muted">
					<span>Data holders: <strong>@Model.DataHolders.Count()</strong></span>
				</small>
			</div>
		</div>

	</div>
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $('#Industry option').prop('selected', false);
            $('#Industry').change(function () {
                var currentId = $('#Industry option:selected').text();
                $('#IndustryId').val(currentId);
            });
        });

        setSidebarMenuItem('data-holders');

        if ('@allowDataHolderRefresh' == 'False') {
            $('#Industry').attr('disabled', true);
        }

		$('#btnReset').click(function () {
            $.ajax({
                url: '/data-holders/reset/dataholderbrands',
                type: 'POST',
                success: function (result) {
					window.location = result
                }
            });
		});
	</script>
}