@{
    ViewData["Title"] = "Dynamic Client Registration";
	var allowDynamicClientRegistration = await _featureManager.IsEnabledAsync(nameof(FeatureFlags.AllowDynamicClientRegistration));    
    
    var mdrDisplayName = "Mock Data Recipient";

    @if (!Context.User.IsLocal())
    {
        mdrDisplayName = "Sandbox Data Recipient";
    }
}
@using CDR.DataRecipient.SDK.Enumerations
@using CDR.DataRecipient.SDK.Extensions
@using CDR.DataRecipient.Web.Extensions
@using CDR.DataRecipient.Web.Features
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Configuration
@using Microsoft.FeatureManagement
@inject IConfiguration _config
@inject IFeatureManager _featureManager
@model DynamicClientRegistrationModel

<h2>@(allowDynamicClientRegistration ? "Dynamic Client Registration" : "Dynamic Client Registrations")</h2>

@if (allowDynamicClientRegistration)
{
    <p>The page allows you to perform Dynamic Client Registration (DCR) with a Data Holder Brand that is currently stored in the Mock Data Recipient's memory - see the Discover Data Holders page for more detail.</p>
}
else
{    
    <p>This page shows Data Holders for which this @(mdrDisplayName) has attempted a Dynamic Client Registration flow and the last response received.</p>
    <p>This @(mdrDisplayName) will periodically attempt to perform Dynamic Client Registration with new Data Holder Brand Ids, or retry Dynamic Client Registration with Data Holder Brand Ids that were previously unsuccessful.</p>
}
@if (Context.User.IsLocal())
{
    <p>If you would like to DCR to a CDR Mock Data Holder, firstly ensure the relevant solution is running then select either <strong>Mock Data Holder (Banking)</strong> or <strong>Mock Data Holder (Energy)</strong> from the 'DH Brand Name' dropdown.</p>
    <p>Alternatively, you can select your own data holder solution if you have added it to the Mock Register and have refreshed the data holders held in memory by the Mock Data Recipient. </p>
    <p><strong><em>Note: The dummy data holder brands displayed here are for other testing purposes and they should not be used</em></strong>.</p>
}


<br />

<div class="row">
    @if (allowDynamicClientRegistration)
    {
        <div class="col-sm-7 col-md-7">
            <div class="card">
                <h5 class="card-header">@(allowDynamicClientRegistration ? $"{Model.TransactionType} Client Registration" : "Dynamic Client Registrations")</h5>
                <div class="card-body">
                    <div class="card-text">
                        @using (Html.BeginForm())
                        {
                            @Html.HiddenFor(m => m.DataRecipientBrandId)
                            <div class="form-small">
                                <div class="row mb-3">
                                    @Html.LabelFor(m => m.DataHolderBrandId, new { @class = "col-sm-3 col-form-label" })
                                    <div class="col-sm-9">
                                        @Html.DropDownListFor(m => m.DataHolderBrandId, Model.DataHolderBrands, "Select Data Holder Brand...", new { @class = "form-control" })
                                    </div>
                                </div>

                                <div id="dcr-view" style="display:none;">
                                    <div class="row mb-3">
                                        @Html.LabelFor(m => m.ClientId, new { @class = "col-sm-3 col-form-label" })
                                        <div class="col-sm-9">
                                            @{
                                                var options = new Dictionary<string, object>();
                                                options.Add("class", "form-control");
                                                if (Model.TransactionType == "Update")
                                                {
                                                    options.Add("readonly", "readonly");
                                                }
                                            }
                                            @Html.TextBoxFor(m => m.ClientId, options)
                                        </div>
                                    </div>

                                   <div class="row mb-3">
                                        @Html.LabelFor(m => m.SsaVersion, new { @class = "col-sm-3 col-form-label" })
                                        <div class="col-sm-9">
                                            @Html.TextBoxFor(m => m.SsaVersion, new { @class = "form-control" })
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        @Html.LabelFor(m => m.Industry, new { @class = "col-sm-3 col-form-label" })
                                        <div class="col-sm-9">
                                            @Html.DropDownListFor(m => m.Industry, Html.GetEnumSelectList<Industry>(), new { @class = "form-control" })
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        @Html.LabelFor(m => m.SoftwareProductId, new { @class = "col-sm-3 col-form-label" })
                                        <div class="col-sm-9">
                                            @Html.TextBoxFor(m => m.SoftwareProductId, new { @class = "form-control", @readonly = "readonly" })
                                        </div>
                                    </div>

                                    <div id="formBody">
                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.RedirectUris, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.RedirectUris, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.Scope, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.Scope, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.TokenEndpointAuthSigningAlg, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.TokenEndpointAuthSigningAlg, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.TokenEndpointAuthMethod, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.TokenEndpointAuthMethod, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.GrantTypes, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.GrantTypes, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.ResponseTypes, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.ResponseTypes, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.ApplicationType, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.ApplicationType, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.IdTokenSignedResponseAlg, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.IdTokenSignedResponseAlg, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.IdTokenEncryptedResponseAlg, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.IdTokenEncryptedResponseAlg, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.IdTokenEncryptedResponseEnc, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.IdTokenEncryptedResponseEnc, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="row mb-3">
                                            @Html.LabelFor(m => m.RequestObjectSigningAlg, new { @class = "col-sm-3 col-form-label" })
                                            <div class="col-sm-9">
                                                @Html.TextBoxFor(m => m.RequestObjectSigningAlg, new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row mb-3 buttons">
                                        <div class="col-sm-9 offset-sm-3">
                                            <input name="register" type="submit" value="Register" class="btn btn-primary" />
                                            <a href="~/dcr" class="btn btn-secondary" title="Cancel">Cancel</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        @Model.Messages

                        @if (!string.IsNullOrEmpty(Model.ResponsePayload))
                        {
                            var json = Model.ResponsePayload.ToPrettyJson();

                            <br />
                            <pre>@json</pre>
                        }
                    </small>
                </div>
            </div>
        </div>
    }

    <div class="@(allowDynamicClientRegistration ? "col-sm-5" : "col-sm-5 col-md-12")">
        <div id="registrations" class="card">
            <h5 class="card-header">Current Registrations</h5>
            <div class="card-body" style="max-height: 400px; overflow-y: scroll;">
                <p class="card-text">
                    @if (@Model.Registrations.Count() > 0)
                    {
                        <table class="table table-sm table-striped table-hover table-bordered">
                            <caption>CDR Current Registrations</caption>
                            <thead>
                                <tr>
                                    <th scope="col">Client ID</th>
                                    <th scope="col">DH Brand Name</th>
                                    @if (!allowDynamicClientRegistration)
                                    {
                                        <th scope="col">Status</th>
                                        <th scope="col">Last Update</th>
                                    }
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            @foreach (var reg in Model.Registrations)
                            {
                                <tr id="@reg.ClientId" style="height:30px;">
                                    <td>
                                        @if (allowDynamicClientRegistration)
                                        {
                                            <a href="~/dcr?clientId=@reg.ClientId">@reg.ClientId</a>
                                        }
                                        else
                                        {
                                            @reg.ClientId
                                        }
                                    </td>
                                    <td>@reg.BrandName (@reg.DataHolderBrandId)</td>
                                    @if (!allowDynamicClientRegistration)
                                    {
                                        <td>@reg.MessageState</td>
										<td>@reg.LastUpdated.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                    }
                                    <td>
                                        @if (allowDynamicClientRegistration)
                                        {
                                            <a href="/dcr/registrations/@reg.ClientId" class="btn btn-danger btn-sm delete" data-id="@reg.ClientId">Delete</a>
                                            <a href="/dcr/registrations/@reg.ClientId" class="btn btn-primary btn-sm view" data-id="@reg.ClientId">View</a>
                                        }
                                        else if (!string.IsNullOrEmpty(@reg.ClientId))
                                        {
                                            <a href="/dcr/registrations/@reg.ClientId" class="btn btn-primary btn-sm view" style="display:inline-block; height:30px;" data-id="@reg.ClientId">View</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </table>
                        <div id="dcr-spinner" class="spinner-border spinner-border-sm text-primary"><span class="visually-hidden">Loading...</span></div>
                    }
                    else
                    {
                        <div>No existing registrations found.</div>
                    }
                </p>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <span>Registrations: <strong>@Model.Registrations.Count()</strong></span>
                </small>
            </div>
        </div>
    </div>
</div>

<div id="modal-registration" class="modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Registration</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="modal-messages"></div>
                <pre id="modal-payload"></pre>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script type="text/javascript">

    // Show|Hide the view
    if ('@allowDynamicClientRegistration' == 'True') {

        var checkFormVisibility = function () {

            // Select picker option selected = Select Data Holder Brand...
            var currentBrandId = document.getElementById("DataHolderBrandId");
            if (currentBrandId.value === "") {
                $('#dcr-view').hide();
            }
            else {
                $('#dcr-view').show();
            }
        }
    }

    $(document).ready(function () {
        var modal = new bootstrap.Modal(document.getElementById('modal-registration'), {
            keyboard: false
        });

        // on Form Load
        if ('@allowDynamicClientRegistration' == 'True') {
            checkFormVisibility();
        }
        $('#dcr-spinner').hide();

        // on Select Item Picked
        if ('@allowDynamicClientRegistration' == 'True') {
            $('#DataHolderBrandId').change(function () {
                checkFormVisibility();
                $('#ClientId').val("");
            });
        }

        $('#registrations .view').click(function () {
            // Get the registration - display in modal view
            $('#dcr-spinner').show();
            $.ajax({
                url: this.href,
                type: 'GET',
                success: function (result) {

                    debugger;

                    modal.show();
                    $('#modal-messages').html(result.messages);
                    var obj = JSON.parse(result.payload);
                    $('#modal-payload').html(JSON.stringify(obj, null, 2));
                    $('#dcr-spinner').hide();
                },
                error: function (xhr, textStatus, errorThrown) {
                    modal.show();
                    $('#modal-messages').html(xhr.responseJSON.messages);
                    $('#dcr-spinner').hide();
                }
            });

            return false;
        });

        if ('@allowDynamicClientRegistration' == 'True') {
            $('#registrations .delete').click(function () {
                var clientId = $(this).data('id');

                // Post -> Delete the registration
                $('#dcr-spinner').show();
                $.ajax({
                    url: this.href,
                    type: 'DELETE',
                    statusCode: {
                        204: function () {
                            window.location = "/dcr";
                        }
                    },
                    success: function (result) {
                        window.location = "/dcr";
                        $('#dcr-spinner').hide();
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        alert(xhr.responseJSON.messages);
                        $('#dcr-spinner').hide();
                    }
                });

                return false;
            });
        }
    });

    setSidebarMenuItem('dcr');
</script>
}
