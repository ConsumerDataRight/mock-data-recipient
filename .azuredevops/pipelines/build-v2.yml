schedules:
- cron: '0 5 * * 0'
  displayName: 'Run at 5:00 AM every Sunday (UTC)'
  always: true
  branches:
    include:
    - develop

parameters:
    # https://github.com/microsoft/azure-pipelines-yaml/blob/master/design/runtime-parameters.md#syntax
  - name: MockRegisterOverrideDependentImageTag
    type: string
    default: ' ' # default value; if no default, then the parameter MUST be given by the user at runtime
  - name: MdhBankingOverrideDependentImageTag
    type: string
    default: ' ' # default value; if no default, then the parameter MUST be given by the user at runtime
  - name: MdhEnergyOverrideDependentImageTag
    type: string
    default: ' ' # default value; if no default, then the parameter MUST be given by the user at runtime

variables:  
  baseSourceDirectory: $(Build.SourcesDirectory)/Source
  dockerComposeDirectory: $(baseSourceDirectory)/DockerCompose

trigger:
  - develop
  - main
  - releases/*

pool:
  vmImage: ubuntu-latest
  
jobs:
- job: Build
  timeoutInMinutes: 120

  steps:
    # set the register tag to use based on the logic in the template file
    - template: set-tag-name.yml
      parameters:
        name: RegisterTag
        input: ${{ parameters.MockRegisterOverrideDependentImageTag }}
        context: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]

    # set the DataHolderBankingTag to use
    - template: set-tag-name.yml
      parameters:
        name: DataHolderBankingTag
        input: ${{ parameters.MdhBankingOverrideDependentImageTag }}
        context: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]

    # set the DataHolderEnergyTag to use
    - template: set-tag-name.yml
      parameters:
        name: DataHolderEnergyTag
        input: ${{ parameters.MdhEnergyOverrideDependentImageTag }}
        context: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]

    # Build mock-data-recipient
    - task: Docker@2
      displayName: Build mock-data-recipient image
      inputs:
        command: build 
        Dockerfile: $(baseSourceDirectory)/Dockerfile
        buildContext: $(baseSourceDirectory)
        repository: mock-data-recipient
        tags: latest

    # Login to Shared ACR
    - task: Docker@2
      displayName: Login to Shared ACR
      inputs:
        command: login    
        containerRegistry: $(SpSharedAcr)

    # Pull and re-tag images from Azure ACR
    - task: Bash@3
      displayName: Pull docker images from ACR
      inputs:
        targetType: inline
        script: |
          docker pull $(SharedAcrBaseUrl).azurecr.io/mock-register:$(RegisterTag)
          docker pull $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:$(DataHolderBankingTag)
          docker pull $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:$(DataHolderEnergyTag)
          docker tag $(SharedAcrBaseUrl).azurecr.io/mock-register:$(RegisterTag) mock-register:latest
          docker tag $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:$(DataHolderBankingTag) mock-data-holder:latest
          docker tag $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:$(DataHolderEnergyTag) mock-data-holder-energy:latest

    # List docker images
    - task: Docker@2
      displayName: List Docker images
      condition: always() 
      inputs:
        command: images

    # Run unit tests
    - script: |
          docker compose --file $(dockerComposeDirectory)/docker-compose.UnitTests.yml up --abort-on-container-exit --exit-code-from mock-data-recipient-unit-tests
      displayName: Unit Tests - Up
      condition: always()

    # Remove unit tests
    - script: |
          docker compose --file $(dockerComposeDirectory)/docker-compose.UnitTests.yml down 
      displayName: 'Unit Tests - Down' 
      condition: always()        

    # Run integration tests
    - script: |
          docker compose --file $(dockerComposeDirectory)/docker-compose.IntegrationTests.yml up --abort-on-container-exit --exit-code-from mock-data-recipient-integration-tests
      displayName: Integration tests - Up
      condition: always()

     # Output Docker Logs
    - script: |
       docker logs mock-register-mdr-int
       docker logs mock-data-holder-mdr-int
       docker logs mock-data-holder-energy-mdr-int
       docker logs mock-data-recipient-mdr-int
      displayName: 'Output Docker Logs'  
      condition: always()   

    # Remove integration tests
    - script: |
          docker compose --file $(dockerComposeDirectory)/docker-compose.IntegrationTests.yml down 
      displayName: 'Integration tests - Down' 
      condition: always()     

    # Surface Integration tests TRX results to Devops
    - task: PublishTestResults@2
      displayName: 'Surface Integration tests TRX results to Devops'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/results.trx' 
        searchFolder: $(dockerComposeDirectory)/_temp/mock-data-recipient-integration-tests/testresults
        mergeTestResults: true
        testRunTitle: 'mock-data-recipient-Integration-tests'
        publishRunAttachments: true

    # Run e2e tests
    - script: |
          docker compose --file $(dockerComposeDirectory)/docker-compose.E2ETests.yml up --abort-on-container-exit --exit-code-from mock-data-recipient-e2e-tests
      displayName: E2E tests - Up
      condition: always()

    # Output Docker Logs
    - script: |
       docker logs mock-register-mdr-e2e
       docker logs mock-data-holder-mdr-e2e
       docker logs mock-data-holder-energy-mdr-e2e
       docker logs mock-data-recipient-mdr-e2e
      displayName: 'Output Docker Logs'  
      condition: always()   

    # Remove e2e tests
    - script: |
          docker compose --file $(dockerComposeDirectory)/docker-compose.E2ETests.yml down 
      displayName: 'E2E tests - Down' 
      condition: always()     

    # Surface E2E tests TRX results to Devops
    - task: PublishTestResults@2
      displayName: 'Surface E2E tests TRX results to Devops'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/results.trx' 
        searchFolder: $(dockerComposeDirectory)/_temp/mock-data-recipient-e2e-tests/testresults
        mergeTestResults: true
        testRunTitle: 'mock-data-recipient-E2E-tests'
        publishRunAttachments: true

    # Save docker image to TAR so it can be published
    - task: Docker@2
      displayName: Save MockDataRecipient image to TAR
      # condition: always()  
      inputs:
        repository: mock-data-recipient
        command: save
        arguments: --output $(build.artifactstagingdirectory)/mock-data-recipient.image.tar mock-data-recipient
        addPipelineData: false

    # Publish docker image
    - task: PublishPipelineArtifact@1
      displayName: Publish container images
      # condition: always()  
      inputs:
        path: $(build.artifactstagingdirectory)
        artifact: Container Images

    # Publish mock-data-recipient unit tests results
    - publish: $(dockerComposeDirectory)/_temp/mock-data-recipient-unit-tests/testresults
      displayName: Publish unit tests
      condition: always()
      artifact: Mock-Data-Recipient - Unit tests

     # Run trx formatter to output .MD and .CSV
    - script: |
        docker run \
          -v=$(dockerComposeDirectory)/_temp/mock-data-recipient-integration-tests/testresults/results.trx:/app/results.trx:ro \
          -v=$(dockerComposeDirectory)/_temp/mock-data-recipient-integration-tests/testresults/formatted/:/app/out/:rw \
          $(SharedAcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "MDR" --outputprefix "MDR" -o out/
      displayName: 'Run trx-formatter for integration tests'  
      condition: always()   

    # Publish mock-data-recipient integration tests results
    - publish: $(dockerComposeDirectory)/_temp/mock-data-recipient-integration-tests/testresults
      displayName: Publish integration tests
      condition: always()
      artifact: Mock-Data-Recipient - Integration tests

    # Run trx formatter to output .MD and .CSV
    - script: |
        docker run \
          -v=$(dockerComposeDirectory)/_temp/mock-data-recipient-e2e-tests/testresults/results.trx:/app/results.trx:ro \
          -v=$(dockerComposeDirectory)/_temp/mock-data-recipient-e2e-tests/testresults/formatted/:/app/out/:rw \
          $(SharedAcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "MDR-E2E" --outputprefix "MDR-E2E" -o out/
      displayName: 'Run trx-formatter for E2E tests'  
      condition: always()   

    # Publish mock-data-recipient e2e tests results
    - publish: $(dockerComposeDirectory)/_temp/mock-data-recipient-e2e-tests/testresults
      displayName: Publish e2e tests
      condition: always()
      artifact: Mock-Data-Recipient - E2E tests

    - task: UseDotNet@2
      displayName: 'Use .NET 8 sdk'
      condition: always()
      inputs:
        packageType: sdk
        version: '8.0.x'
        performMultiLevelLookup: true

    - task: CmdLine@2
      displayName: 'Install dotnet-ef'
      condition: always()
      inputs:
        script: 'dotnet tool install --version 8.0.4 --global dotnet-ef'

    - task: CmdLine@2
      displayName: 'Check dotnet-ef version'
      condition: always()
      inputs:
        script: 'dotnet-ef'

    - script: |
        cd $(baseSourceDirectory)/CDR.DataRecipient.Repository.SQL 
        dotnet ef migrations bundle --context RecipientDatabaseContext --verbose --self-contained
        ls
      displayName: 'Run EF Migrations bundle'
      condition: always()

    - publish: $(baseSourceDirectory)/CDR.DataRecipient.Repository.SQL/efbundle
      displayName: Publish EF Migration bundle
      condition: always()
      artifact: Database Migration Scripts      

    - task: Bash@3
      displayName: 'Tag and push Mock Data Recipient image with Source Branch Name for any successful builds.'
      condition: succeeded()
      inputs:
        targetType: inline
        script: |
          echo Tagging mock-data-recipient with Source Branch Name: $(Build.SourceBranchName)
          docker tag mock-data-recipient $(SharedAcrBaseUrl).azurecr.io/mock-data-recipient:$(Build.SourceBranchName)

          echo Pushing all tags to $(SharedAcrBaseUrl).azurecr.io/mock-data-recipient
          docker image push --all-tags $(SharedAcrBaseUrl).azurecr.io/mock-data-recipient

    - task: Bash@3
      displayName: 'Tag and Push Mock Data Recipient images for develop, main and release branches.'
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/')))
      inputs:
        targetType: inline
        script: |
          echo Tagging mock-data-recipient with latest tag
          docker tag mock-data-recipient $(SharedAcrBaseUrl).azurecr.io/mock-data-recipient:latest

          echo Tagging mock-data-recipient with Source Branch Name-latest: $(Build.SourceBranchName)-latest
          docker tag mock-data-recipient $(SharedAcrBaseUrl).azurecr.io/mock-data-recipient:$(Build.SourceBranchName)-latest

          echo Tagging mock-data-recipient with build id: $(Build.BuildId)
          docker tag mock-data-recipient $(SharedAcrBaseUrl).azurecr.io/mock-data-recipient:$(Build.BuildId)

          echo Pushing all tags to $(SharedAcrBaseUrl).azurecr.io/mock-data-recipient
          docker image push --all-tags $(SharedAcrBaseUrl).azurecr.io/mock-data-recipient