# Build pipeline v2 (Containerised)

variables:  

  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}: 
    containerTag: main
  ${{ else }}:
    containerTag: develop
    
  baseSourceDirectory: $(Build.SourcesDirectory)/Source

trigger:
  - develop
  - main
  - releases/*

pool:
  vmImage: ubuntu-latest
  
jobs:
- job: Build
  timeoutInMinutes: 120

  steps:
    # Build mock-data-recipient
    - task: Docker@2
      displayName: Build mock-data-recipient image
      inputs:
        command: build 
        Dockerfile: $(baseSourceDirectory)/Dockerfile
        buildContext: $(baseSourceDirectory)
        repository: mock-data-recipient
        tags: latest

    # Login to ACR
    - task: Docker@2
      displayName: Login to ACR
      condition: always()
      inputs:
        command: login
        containerRegistry: $(AcrBaseUrl)

    # Pull and re-tag images from Azure ACR
    - task: Bash@3
      displayName: Pull docker images from ACR
      inputs:
        targetType: inline
        script: |
          docker pull $(AcrBaseUrl).azurecr.io/mock-register:$(containerTag)
          docker pull $(AcrBaseUrl).azurecr.io/mock-data-holder:$(containerTag)
          docker pull $(AcrBaseUrl).azurecr.io/mock-data-holder-energy:$(containerTag)
          docker tag $(AcrBaseUrl).azurecr.io/mock-register:$(containerTag) mock-register:latest
          docker tag $(AcrBaseUrl).azurecr.io/mock-data-holder:$(containerTag) mock-data-holder:latest
          docker tag $(AcrBaseUrl).azurecr.io/mock-data-holder-energy:$(containerTag) mock-data-holder-energy:latest 

    # List docker images
    - task: Docker@2
      displayName: List Docker images
      condition: always() 
      inputs:
        command: images

    # Run unit tests
    - task: DockerCompose@0
      displayName: Unit tests - Up
      inputs:
        action: Run a Docker Compose command
        dockerComposeFile: $(baseSourceDirectory)/docker-compose.UnitTests.yml     
        dockerComposeCommand: up --abort-on-container-exit --exit-code-from mock-data-recipient-unit-tests

    # Remove unit tests
    - task: DockerCompose@0
      displayName: Unit tests - Down
      condition: always() 
      inputs:
        action: Run a Docker Compose command
        dockerComposeFile: $(baseSourceDirectory)/docker-compose.UnitTests.yml     
        dockerComposeCommand: down

    # Run integration tests
    - task: DockerCompose@0
      displayName: Integration tests - Up
      condition: always()
      inputs:
        action: Run a Docker Compose command
        dockerComposeFile: $(baseSourceDirectory)/docker-compose.IntegrationTests.yml     
        dockerComposeCommand: up --abort-on-container-exit --exit-code-from mock-data-recipient-integration-tests

     # Output Docker Logs
    - script: |
       docker logs mock-register
       docker logs mock-data-holder
       docker logs mock-data-holder-energy
       docker logs mock-data-recipient
      displayName: 'Output Docker Logs'  
      condition: always()   

    # Remove integration tests
    - task: DockerCompose@0
      displayName: Integration tests - Down
      condition: always()
      inputs:
        action: Run a Docker Compose command
        dockerComposeFile: $(baseSourceDirectory)/docker-compose.IntegrationTests.yml     
        dockerComposeCommand: down

    # Surface Integration tests TRX results to Devops
    - task: PublishTestResults@2
      displayName: 'Surface Integration tests TRX results to Devops'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/results.trx' 
        searchFolder: $(baseSourceDirectory)/_temp/mock-data-recipient-integration-tests/testresults
        mergeTestResults: true
        testRunTitle: 'mock-data-recipient-Integration-tests'
        publishRunAttachments: true

    # Run e2e tests
    - task: DockerCompose@0
      displayName: E2E tests - Up
      condition: always()
      inputs:
        action: Run a Docker Compose command
        dockerComposeFile: $(baseSourceDirectory)/docker-compose.E2ETests.yml     
        dockerComposeCommand: up --abort-on-container-exit --exit-code-from mock-data-recipient-e2e-tests

    # Output Docker Logs
    - script: |
       docker logs mock-register
       docker logs mock-data-holder
       docker logs mock-data-holder-energy
       docker logs mock-data-recipient
      displayName: 'Output Docker Logs'  
      condition: always()   

    # Remove e2e tests
    - task: DockerCompose@0
      displayName: E2E tests - Down
      condition: always()
      inputs:
        action: Run a Docker Compose command
        dockerComposeFile: $(baseSourceDirectory)/docker-compose.E2ETests.yml     
        dockerComposeCommand: down

    # Surface E2E tests TRX results to Devops
    - task: PublishTestResults@2
      displayName: 'Surface E2E tests TRX results to Devops'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/results.trx' 
        searchFolder: $(baseSourceDirectory)/_temp/mock-data-recipient-e2e-tests/testresults
        mergeTestResults: true
        testRunTitle: 'mock-data-recipient-E2E-tests'
        publishRunAttachments: true

    # Save docker image to TAR so it can be published
    - task: Docker@2
      displayName: Save MockDataRecipient image to TAR
      # condition: always()  
      inputs:
        repository: mock-data-recipient
        command: save
        arguments: --output $(build.artifactstagingdirectory)/mock-data-recipient.image.tar mock-data-recipient
        addPipelineData: false

    # Publish docker image
    - task: PublishPipelineArtifact@1
      displayName: Publish container images
      # condition: always()  
      inputs:
        path: $(build.artifactstagingdirectory)
        artifact: Container Images

    # FIXME - MJS - See dockercompose, volume no longer mapped as 1001:121 (vsts:docker) in build pipeline and causes issue with chown in dockerfile (appuser:appgroup), ie stops register from starting because of different user
    # # Publish mock-register logs
    # - publish: $(baseSourceDirectory)/_temp/mock-register/tmp
    #   displayName: Publish MockRegister logs
    #   condition: always()
    #   artifact: Mock-Register - Logs

    # FIXME - MJS - See dockercompose, volume no longer mapped as 1001:121 (vsts:docker) in build pipeline and causes issue with chown in dockerfile (appuser:appgroup), ie stops register from starting because of different user
    # # Publish mock-data-holder logs
    # - publish: $(baseSourceDirectory)/_temp/mock-data-holder/tmp
    #   displayName: Publish MockDataHolder logs
    #   condition: always()
    #   artifact: Mock-Data-Holder - Logs

    # FIXME - MJS - See dockercompose, volume no longer mapped as 1001:121 (vsts:docker) in build pipeline and causes issue with chown in dockerfile (appuser:appgroup), ie stops register from starting because of different user
    # # Publish mock-data-holder-energy logs
    # - publish: $(baseSourceDirectory)/_temp/mock-data-holder-energy/tmp
    #   displayName: Publish MockDataHolder-Energy logs
    #   condition: always()
    #   artifact: Mock-Data-Holder-Energy - Logs

    # FIXME - MJS - See dockercompose, volume no longer mapped as 1001:121 (vsts:docker) in build pipeline and causes issue with chown in dockerfile (appuser:appgroup), ie stops register from starting because of different user
    # # Publish mock-data-recipient logs
    # - publish: $(baseSourceDirectory)/_temp/mock-data-recipient/tmp
    #   displayName: Publish MockDataRecipient logs
    #   condition: always()
    #   artifact: Mock-Data-Recipient - Logs

    # Publish mock-data-recipient unit tests results
    - publish: $(baseSourceDirectory)/_temp/mock-data-recipient-unit-tests/testresults
      displayName: Publish unit tests
      condition: always()
      artifact: Mock-Data-Recipient - Unit tests

     # Run trx formatter to output .MD and .CSV
    - script: |
        docker run \
          -v=$(baseSourceDirectory)/_temp/mock-data-recipient-integration-tests/testresults/results.trx:/app/results.trx:ro \
          -v=$(baseSourceDirectory)/_temp/mock-data-recipient-integration-tests/testresults/formatted/:/app/out/:rw \
          $(AcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "MDR" --outputprefix "MDR" -o out/
      displayName: 'Run trx-formatter for integration tests'  
      condition: always()   

    # Publish mock-data-recipient integration tests results
    - publish: $(baseSourceDirectory)/_temp/mock-data-recipient-integration-tests/testresults
      displayName: Publish integration tests
      condition: always()
      artifact: Mock-Data-Recipient - Integration tests

    # Run trx formatter to output .MD and .CSV
    - script: |
        docker run \
          -v=$(baseSourceDirectory)/_temp/mock-data-recipient-e2e-tests/testresults/results.trx:/app/results.trx:ro \
          -v=$(baseSourceDirectory)/_temp/mock-data-recipient-e2e-tests/testresults/formatted/:/app/out/:rw \
          $(AcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "MDR-E2E" --outputprefix "MDR-E2E" -o out/
      displayName: 'Run trx-formatter for E2E tests'  
      condition: always()   

    # Publish mock-data-recipient e2e tests results
    - publish: $(baseSourceDirectory)/_temp/mock-data-recipient-e2e-tests/testresults
      displayName: Publish e2e tests
      condition: always()
      artifact: Mock-Data-Recipient - E2E tests

    - task: UseDotNet@2
      displayName: 'Use .NET 6 sdk'
      condition: always()
      inputs:
        packageType: sdk
        version: '6.0.x'
        performMultiLevelLookup: true

    - task: CmdLine@2
      displayName: 'Install dotnet-ef'
      condition: always()
      inputs:
        script: 'dotnet tool install --global dotnet-ef'

    - task: CmdLine@2
      displayName: 'Check dotnet-ef version'
      condition: always()
      inputs:
        script: 'dotnet-ef'

    - script: |
        cd $(baseSourceDirectory)/CDR.DataRecipient.Repository.SQL 
        dotnet ef migrations bundle --context RecipientDatabaseContext --verbose --self-contained
        ls
      displayName: 'Run EF Migrations bundle'
      condition: always()

    - publish: $(baseSourceDirectory)/CDR.DataRecipient.Repository.SQL/efbundle
      displayName: Publish EF Migration bundle
      condition: always()
      artifact: Database Migration Scripts
      
    - task: Docker@2
      displayName: 'Re-Tag Mock Data Recipient image with :branch-name'
      inputs:
        containerRegistry: $(AcrBaseUrl)
        repository: 'mock-data-recipient'
        command: tag
        arguments: 'mock-data-recipient $(AcrBaseUrl).azurecr.io/mock-data-recipient:$(Build.SourceBranchName)'

    - task: Docker@2
      displayName: 'Re-Tag Mock Data Recipient image with :latest (for develop branch only)'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
      inputs:
        containerRegistry: $(AcrBaseUrl)
        repository: 'mock-data-recipient'
        command: tag
        arguments: 'mock-data-recipient $(AcrBaseUrl).azurecr.io/mock-data-recipient:latest'

    - task: CmdLine@2
      displayName: 'Push Mock Data Recipient image with :branch-name tag to ACR'
      inputs:
        script: 'docker push $(AcrBaseUrl).azurecr.io/mock-data-recipient:$(Build.SourceBranchName)' 

    - task: CmdLine@2
      displayName: 'Push Mock Data Recipient image with :latest tag to ACR (develop branch only)'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
      inputs:
        script: 'docker push $(AcrBaseUrl).azurecr.io/mock-data-recipient:latest'   
