# Build pipeline v2 (Containerised)

resources:
  repositories:
  - repository: MockRegister
    type: git
    name: sb-mock-register
    ref: develop    

trigger:
  - none
  
pool:
  vmImage: ubuntu-latest

steps:

# Checkout repositories
- checkout: MockRegister
- checkout: self
    
# Build mock-data-recipient
- task: Docker@2
  displayName: Build mock-data-recipient image
  inputs:
    command: build 
    Dockerfile: $(Build.SourcesDirectory)/sb-mock-data-recipient/Source/Dockerfile
    buildContext: $(Build.SourcesDirectory)/sb-mock-data-recipient/Source
    repository: mock-data-recipient
    tags: latest

# List docker images
- task: Docker@2
  displayName: List Docker images
  condition: always() 
  inputs:
    command: images

# Save docker image to TAR so it can be published
- task: Docker@2
  displayName: Save MockDataRecipient image to TAR
  # condition: always()  
  inputs:
    repository: mock-data-recipient
    command: save
    arguments: --output $(build.artifactstagingdirectory)/mock-data-recipient.image.tar mock-data-recipient
    addPipelineData: false

# Publish docker image
- task: PublishPipelineArtifact@1
  displayName: Publish container images
  # condition: always()  
  inputs:
    path: $(build.artifactstagingdirectory)
    artifact: Container Images

- task: UseDotNet@2
  displayName: 'Use .NET 6 sdk'
  condition: always()
  inputs:
    packageType: sdk
    version: '8.0.x'
    performMultiLevelLookup: true

- task: CmdLine@2
  displayName: 'Install dotnet-ef'
  condition: always()
  inputs:
    script: 'dotnet tool install --version 7.0.13 --global dotnet-ef'

- task: CmdLine@2
  displayName: 'Check dotnet-ef version'
  condition: always()
  inputs:
    script: 'dotnet-ef'

- script: |
    cd $(Build.SourcesDirectory)/sb-mock-data-recipient/Source/CDR.DataRecipient.Repository.SQL 
    dotnet ef migrations bundle --context RecipientDatabaseContext --verbose --self-contained
    ls
  displayName: 'Run EF Migrations bundle'
  condition: always()

- publish: $(Build.SourcesDirectory)/sb-mock-data-recipient/Source/CDR.DataRecipient.Repository.SQL/efbundle
  displayName: Publish EF Migration bundle
  condition: always()
  artifact: Database Migration Scripts
